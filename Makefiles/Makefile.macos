# Makefile for libsrcnn for macOS dylib, minimal 11.0 universal.
# by Raphael Kim

CPP = llvm-gcc
CXX = llvm-g++
AR  = ar
RL  = ranlib

# sense macOS kernel type
KERNEL    = $(shell uname -s)
KRNL_ARCH = $(shell uname -m)
KRNL_VER  = $(shell uname -r | cut -d . -f1)
KERNELID  = $(KERNEL)
MACHINEID = universal
MACOSMINV = 11.0

SRC_PATH = src
OBJ_PATH = obj
BIN_PATH = lib
SO_EXT   = .dylib
LIB_EXT  = .a
LIB_NM   = libsrcnn
TARGET   = $(LIB_NM)$(SO_EXT)

SRCS  = $(SRC_PATH)/frawscale.cpp
SRCS += $(SRC_PATH)/libsrcnn.cpp
OBJS  = $(SRCS:$(SRC_PATH)/%.cpp=$(OBJ_PATH)/%.o)

CFLAGS += -I$(SRC_PATH)
CFLAGS += -DBUILDING_DLL
CFLAGS += -DNO_OMP

# -- for debugging 
#CFLAGS += -g3 -DDEBUG

# -- for debugging
#LFLAGS += -g3

# architecture flag setting.
# Darwin, kernel 20 (big sur) automatically using universal binary.
ifeq ($(KERNEL),Darwin)
    ifeq ($(shell test $(KRNL_VER) -gt 19; echo $$?),0)
        CFLAGS += -arch x86_64 -arch arm64
        CFLAGS += -mmacosx-version-min=$(MACOSMINV)
        LFLAGS += -arch x86_64 -arch arm64
    endif
endif

#all: prepare $(BIN_PATH)/$(TARGET)
all: static
static: prepare $(BIN_PATH)/$(LIB_NM)$(LIB_EXT)

prepare:
	@mkdir -p $(OBJ_PATH)
	@mkdir -p $(BIN_PATH)

clean:
	@echo "Cleaning ..."
	@rm -rf $(OBJ_PATH)/*.o
	@rm -rf $(BIN_PATH)/$(TARGET)
	@rm -rf $(BIN_PATH)/$(LIB_NM)$(LIB_EXT)

$(OBJS): $(OBJ_PATH)/%.o: $(SRC_PATH)/%.cpp
	@echo "Compiling $< ..."
	@$(CXX) $(CFLAGS) $(CPUOPT) -c $< -o $@

$(BIN_PATH)/$(TARGET): $(OBJS)
	@echo "Linking $@ ..."
	@$(CXX) -shared $^ $(CFLAGS) $(CPUOPT) $(LFLAGS) -o $@
	@cp -rf $(SRC_PATH)/libsrcnn.h $(BIN_PATH)

$(BIN_PATH)/$(LIB_NM)$(LIB_EXT): $(OBJS)
	@echo "Generating $@ ..."
	@$(AR) -cr $@ $^
	@$(RL) $@
