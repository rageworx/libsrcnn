# Experimental makefile for homebrew llvm related testing.
# Need to make dylib before with Makefile.homebrewllvm
# ----------------------------------------------------------------------
# Written by Raph.K.
#

GCC = llvm-gcc
GPP = llvm-g++
AR  = ar
FCG = fltk-config --use-images

# sense macOS kernel type
KERNEL    = $(shell uname -s)
KRNL_ARCH = $(shell uname -m)
KRNL_VER  = $(shell uname -r | cut -d . -f1)
KERNELID  = $(KERNEL)

# FLTK configs 
FLTKCFG_CXX := $(shell ${FCG} --cxxflags)
FLTKCFG_LFG := $(shell ${FCG} --ldflags)

# Base PATH
BASE_PATH = .
LIB_PATH  = $(BASE_PATH)/lib
SRC_PATH  = $(BASE_PATH)/src
RES_PATH  = $(BASE_PATH)/res

# TARGET settings
TARGET_PKG = srcnntest
TARGET_DIR = ./bin
TARGET_OBJ = ./obj/test

# DEFINITIONS
# test app don't using OpemMP.
DEFS  = -DFORTESTINGBIN
DEFS += -DNO_OMP

# Compiler optiops 
COPTS  = 
COPTS += -ffast-math -fexceptions -O3
COPTS += $(FLTKCFG_CXX)

# CC FLAG
CFLAGS  = -I$(SRC_PATH)
CFLAGS += -I$(LIB_PATH)
CFLAGS += -I$(RES_PATH)
CFLAGS += -I../fl_imgtk/lib
CFLAGS += $(DEFS)
CFLAGS += $(COPTS)

# LINK FLAG
LFLAGS  = -L$(LIB_PATH)
LFLAGS += -L../fl_imgtk/lib
LFLAGS += -lsrcnn
LFLAGS += -lpthread
LFLAGS += -lfl_imgtk
LFLAGS += $(FLTKCFG_LFG)

# source to obj, automatic.
SRCS = $(SRC_PATH)/test.cpp $(SRC_PATH)/tick.cpp
OBJS = $(SRCS:$(SRC_PATH)/%.cpp=$(TARGET_OBJ)/%.o)

.PHONY: prepare clean

all: prepare clean continue

continue: $(TARGET_DIR)/$(TARGET_PKG)

prepare:
	@mkdir -p $(TARGET_DIR)
	@mkdir -p $(TARGET_DIR)/res
	@mkdir -p $(TARGET_OBJ)

clean:
	@echo "Cleaning built targets ..."
	@rm -rf $(TARGET_DIR)/$(TARGET_PKG)
	@rm -rf $(TARGET_INC)/*.h
	@rm -rf $(TARGET_OBJ)/*.o

$(OBJS): $(TARGET_OBJ)/%.o: $(SRC_PATH)/%.cpp
	@echo "Compiling $< ..."
	@$(GPP) $(CFLAGS) -c $< -o $@

$(TARGET_DIR)/$(TARGET_PKG): $(OBJS)
	@echo "Linking $@ ..."
	@$(GPP) $(TARGET_OBJ)/*.o $(CFLAGS) $(LFLAGS) -o $@
	@echo "done."
